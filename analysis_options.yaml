# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  plugins:
    - dart_code_metrics
  exclude:
    - "**/intl/**"
    - "**/l10n.dart"
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/*.chopper.dart"
    - "**/*.gr.dart"
    - "**/dump/**"

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
    always_use_package_imports: true
    avoid_dynamic_calls: true
    avoid_empty_else: true
    avoid_relative_lib_imports: true
    
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

dart_code_metrics:
  metrics:
    cyclomatic-complexity: 20
    lines-of-code: 100
    maximum-nesting-level: 5
    number-of-methods: 10
    number-of-parameters: 8
  metrics-exclude:
    - test/**
    - intl/**
    - l10n.dart
  rules:
    # Common rules
    - newline-before-return
    - no-boolean-literal-compare
    - no-empty-block
    - prefer-trailing-comma
    - prefer-conditional-expressions
    - prefer-first
    - prefer-last
    - no-equal-then-else
    # Flutter specific
    - avoid-border-all
    - avoid-returning-widgets
    - avoid-unnecessary-setstate
    - avoid-wrapping-in-padding
    - prefer-const-border-radius
    - prefer-extracting-callbacks
    - prefer-single-widget-per-file:
        ignore-private-widgets: true
  anti-patterns:
    - long-method
    - long-parameter-list
